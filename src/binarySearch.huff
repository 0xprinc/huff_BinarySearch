// INTERFACE
#define function binary(uint256,uint256[]) nonpayable returns(uint256)

// macros
#define macro BINARY() = takes(0) returns(0) {
    0x64    returndatasize        mstore                  // storing the value of the left pointer "i"
    0x44    0x44   calldataload            // storing the value of the right pointer "j"
    0x20    mul    add    0x40    mstore    

    while:
        returndatasize  mload   0x40    mload   lt  not_found  jumpi    // while i<=j

        0x20    0x64    returndatasize  mload   sub     div     0x60    mstore      // calling the i index as zero index rather than the byte offset
        0x20    0x64    0x40    mload   sub     div     0x80    mstore      // calling the j index as zero index rather than the byte offset
        
        0x02    0x60    mload   0x80    mload   sub     div     0x60        
        mload   add     0x20    mul     0x64    add     0x20    mstore      


        0x20    mload   calldataload    0x04    calldataload    eq    ans    jumpi   // if the middle value is the num
        0x20    mload   calldataload    0x04    calldataload    gt    great    jumpi  //  if the num is greater than the middle value   
        0x20    mload   calldataload    0x04    calldataload    lt    less    jumpi    //   if the num is smaller than the middle value

    not_found:
        0xff    returndatasize    mstore
        0x20    returndatasize    return          // returning the alternative value
    
    ans:
        0x20    0x64    0x20    mload   sub     div     0x20    mstore      // creating the index of the value from the value of mid index
        0x20    0x20    return                                  //  returning it
    
    great:
        0x20    0x20    mload   add     returndatasize    mstore    // increasing the value of the  i = mid + 1
        pc      while   jumpi      // reiterating through while
    less:
        0x20    0x20    mload   sub     0x40    mstore      // j = mid - 1
        pc      while   jumpi       // reiterating through while
} 

#define macro MAIN() = takes(0) returns(0) {
    returndatasize    calldataload    0xE0    shr

    __FUNC_SIG(binary) eq binary jumpi

    binary:
        BINARY()
}